Prior to v0.1
-------------
* Add basic Expectations:
    * [DONE] Equals
    * [DONE] NotEquals
    * [DONE] Is / Identical
    * [DONE] IsNot / NotIdentical
    * [DONE] Pattern
    * [DONE] NoPattern
    * [DONE] GreaterThan
    * [DONE] NotGreaterThan
    * [DONE] LesserThan
    * [DONE] NotLesserThan
    * GreaterThanOrEqual / NotGreaterThanOrEqual
    * LesserThanOrEqual / NotLesserThanOrEqual
    * Between
    * NotBetween
    * Type / A / An
    * NotType / NotA / NotAn

Floating tasks
--------------
* Add Either/Neither expectations:
    ensure('foo')->either(
        'type', 'string',
        'equals', 'foo'
    );
    ensure('foo')->neither(
        'type', 'int',
        'equals', 'bar
    );
    ensure('joeuser')->either(
        'canLogin', 'some password',
        'canRegister, array('some password', array('first_name' => 'Joe', 'last_name' => 'User'))
    ); // is like:
    ensure('joeuser')->canLogin('some password') or
    ensure('joeuser')->canRegister('some password', array('first_name' => 'Joe', 'last_name' => 'User'))
* Explore adding modifiers instead of either/niether syntax:
    ensure('foo')->type('integer')->or->equals('foo');
    ensure('foo')
        ->type('integer')
        ->or
        ->type('string')->and->equals('foo');
    
    All properties would be Ensure_ExpectationModifiers that the Policy would notify when new
    expectations arrive.  Another use case would be:
    ensure('foo')
        ->any
            ->type('int')
            ->type('boolean')
            ->type('string');
    NOTE: all or/and's would have to be "or_/and_" unless keyword restrictions are removed in 5.3
